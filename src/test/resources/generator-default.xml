<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
    注意，两个属性只能选址一个; 另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
    <properties resource="" url="" />
     -->
    <!--配置属性文件-->
    <!--<properties resource="generator-init.properties"/>-->
    <properties
            url="file:///I:/github-obj/ciaj-admin/src/test/resources/generator-init.properties"/>
    <!-- 在MBG工作的时候，需要额外加载的依赖包
       location属性指明加载jar/zip包的全路径
   <classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" />
     -->
    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!--配置是否使用通用 Mapper 自带的注释扩展，默认 true-->
        <property name="useMapperCommentGenerator" value="true"/>
        <property name="suppressAllComments" value="true"/>
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
                一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
             -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!--plugin 通用 Mapper 插件，可以生成带注解的实体类-->
        <!--<plugin type="tk.mybatis.mapper.generator.MapperPlugin">-->
            <!--<property name="mappers" value="${base.mappers}"/>-->
            <!--<property name="caseSensitive" value="true"/>-->
            <!--<property name="forceAnnotation" value="true"/>-->
        <!--</plugin>-->
        <!--plugin mapper接口-->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.mapper}"/>
            <property name="author" value="${gen.author}"/>
            <property name="baseMapper" value="${base.mappers}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="voQm" value="${vo.targetPackage}"/>
            <property name="dtoPo" value="${dto.targetPackage}"/>
            <property name="description" value="${gen.description}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="targetPackage" value="${mapper.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/mapper.ftl"/>
            <property name="mapperSuffix" value="Mapper"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!-- plugin generator - mapper.xml -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.mapperXml}"/>
            <property name="author" value="${gen.author}"/>
            <property name="genSelectKey" value="${mapper.xml.genSelectKey}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="po" value="${po.targetPackage}"/>
            <property name="cachePackage" value="${cache.package}"/>
            <property name="voQm" value="${vo.targetPackage}"/>
            <property name="dtoPo" value="${dto.targetPackage}"/>
            <property name="description" value="${gen.description}"/>
            <property name="targetProject" value="${mapper.xml.targetProject}"/>
            <property name="targetPackage" value="${mapper.xml.targetPackage}"/>
            <property name="mapperPackage" value="${mapper.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/mapperXml.ftl"/>
            <property name="mapperSuffix" value="Mapper"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.xml"/>
        </plugin>
        <!--plugin generator - XXXvo.java -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.vo}"/>
            <property name="author" value="${gen.author}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="description" value="${gen.description}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="targetPackage" value="${vo.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/vo.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}Vo.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - XXXdto.java -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.dto}"/>
            <property name="author" value="${gen.author}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="description" value="${gen.description}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="targetPackage" value="${dto.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/dto.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}Dto.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - XXXdto.java -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.po}"/>
            <property name="author" value="${gen.author}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="description" value="${gen.description}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="targetPackage" value="${po.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/po.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}Po.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - Service.java -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.service}"/>
            <property name="author" value="${gen.author}"/>
            <property name="baseService" value="${service.base.targetPackage}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="voPo" value="${vo.targetPackage}"/>
            <property name="dtoPo" value="${dto.targetPackage}"/>
            <property name="description" value="${gen.description}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="targetPackage" value="${service.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/service.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}Service.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - ServiceImpl.java -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.serviceImpl}"/>
            <property name="author" value="${gen.author}"/>
            <property name="description" value="${gen.description}"/>
            <property name="mapperPackage" value="${mapper.targetPackage}"/>
            <property name="baseService" value="${service.base.targetPackage}"/>
            <property name="servicePackage" value="${service.targetPackage}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="voPo" value="${vo.targetPackage}"/>
            <property name="dtoPo" value="${dto.targetPackage}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="targetPackage" value="${serviceImpl.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/service-impl.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}ServiceImpl.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - mvc.java -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.mvc}"/>
            <property name="author" value="${gen.author}"/>
            <property name="requestMapping" value="${mvc.requestMapping}"/>
            <property name="permission" value="${mvc.permission}"/>
            <property name="description" value="${gen.description}"/>
            <property name="servicePackage" value="${service.targetPackage}"/>
            <property name="poPackage" value="${po.targetPackage}"/>
            <property name="voPo" value="${vo.targetPackage}"/>
            <property name="dtoPo" value="${dto.targetPackage}"/>
            <property name="targetProject" value="${java.targetProject}"/>
            <property name="mvcDesc" value="${mvc.desc}"/>
            <property name="targetPackage" value="${mvc.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/java/mvc.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}Controller.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - index.html -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.html}"/>
            <property name="author" value="${gen.author}"/>
            <property name="targetProject" value="${resource.targetProject}"/>
            <property name="targetPackage" value="${html.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/html/index.ftl"/>
            <property name="jsModule" value="${html.jsModule}"/>
            <property name="jsName" value="${html.jsName}"/>
            <property name="fileName" value="${html.jsName}.html"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!--plugin generator - index.js -->
        <plugin type="${templateFilePlugin}">
            <property name="enabled" value="${gen.js}"/>
            <property name="author" value="${gen.author}"/>
            <property name="targetProject" value="${resource.targetProject}"/>
            <property name="targetPackage" value="${js.targetPackage}"/>
            <property name="templatePath" value="${templatePath}/html/js.ftl"/>
            <property name="jsModule" value="${html.jsModule}"/>
            <property name="mvcUrl" value="${mvc.requestMapping}"/>
            <property name="jsName" value="${html.jsName}"/>
            <property name="fileName" value="${html.jsName}.js"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter" value="${templateFormatter}"/>
        </plugin>
        <!-- 数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.connectionURL}" userId="${jdbc.userId}"
                        password="${jdbc.password}">
            <property name="${jdbc.remarks.name}" value="${jdbc.remarks.value}"></property>
            <!--解决连接到别的数据库表问题-->
            <property name="nullCatalogMeansCurrent" value="true" />
            <!--解决不生成delete、update等-->
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>
        <!--MyBatis 生成器只需要生成 Model-->
        <javaModelGenerator targetPackage="${base.targetPackage}" targetProject="${java.targetProject}">
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查-->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成映射文件的包名和位置 不用模板改这里-->
        <!-- 生成SQL map的XML文件生成器，
             注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
             或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
             targetPackage/targetProject:同javaModelGenerator
        -->
        <!--<sqlMapGenerator targetPackage="${mapper.xml.targetPackage}" targetProject="${mapper.xml.targetProject}">-->
        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
        <!--<property name="enableSubPackages" value="true"/>-->
        <!--</sqlMapGenerator>-->

        <!--生成DAO的包名和位置  不用模板改这里-->
        <!--<javaClientGenerator type="XMLMAPPER" targetPackage="${mapper.targetPackage}" targetProject="${java.targetProject}">-->
        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
        <!--<property name="enableSubPackages" value="true"/>-->
        <!--</javaClientGenerator>-->

        <!--oracle table 改这里-->
        <!--<table tableName="demo_table" domainObjectName="DemoTableEntity" enableCountByExample="false"-->
        <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
        <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
        <!--<generatedKey column="ID" sqlStatement="Oracle" type="pre"/>-->
        <!--&lt;!&ndash;oracle 配置 or &ndash;&gt;-->
        <!--&lt;!&ndash;<generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/>&ndash;&gt;-->
        <!--<ignoreColumn column="MODIFIED_AT"/>-->
        <!--</table>-->

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
        -->
        <!--mysql table 改这里-->
        <table tableName="${tableName}" domainObjectName="${domainObjectName}">
            <!--采用uuid 重写insert方法实现自定义-->
            <!--<generatedKey column="id" sqlStatement="JDBC"/>-->
            <ignoreColumn column="${ignoreColumn}"/>
        </table>
    </context>
</generatorConfiguration>